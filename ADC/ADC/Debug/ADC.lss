
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000705  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066c  00000000  00000000  000008cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022c  00000000  00000000  00000f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001168  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000363  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000021  00000000  00000000  000014ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <readADC>:
#include <avr/io.h>
#include <util/delay.h>
uint8_t adc[2];
uint16_t readADC(uint8_t adc)
{
	ADMUX = _BV(REFS0) | adc;
  90:	80 64       	ori	r24, 0x40	; 64
  92:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA |= _BV(ADSC);
  96:	ea e7       	ldi	r30, 0x7A	; 122
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	80 83       	st	Z, r24
	while(!(ADCSRA & (1<<ADIF)));
  a0:	80 81       	ld	r24, Z
  a2:	84 ff       	sbrs	r24, 4
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <readADC+0x10>
	return ADC;
  a6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  aa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}
  ae:	08 95       	ret

000000b0 <main>:

int main(void)
{
    /* Replace with your application code */
   
    DDRB = 0xFF;
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF;
  b4:	8a b9       	out	0x0a, r24	; 10
	ADMUX = _BV(REFS0) ;
  b6:	80 e4       	ldi	r24, 0x40	; 64
  b8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA |= _BV(ADPS0) | _BV(ADEN) | _BV(ADSC);
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	81 6c       	ori	r24, 0xC1	; 193
  c4:	80 83       	st	Z, r24
	
	while (1) 
    {
		PORTB = readADC(0);
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	0e 94 48 00 	call	0x90	; 0x90 <readADC>
  cc:	85 b9       	out	0x05, r24	; 5
		PORTD = readADC(1);
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	0e 94 48 00 	call	0x90	; 0x90 <readADC>
  d4:	8b b9       	out	0x0b, r24	; 11
  d6:	f7 cf       	rjmp	.-18     	; 0xc6 <main+0x16>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
