
Repaso_10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000150  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000150  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800106  00800106  000001ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000896  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000764  00000000  00000000  00000b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000031f  00000000  00000000  0000129e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  000015c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040b  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010b  00000000  00000000  00001a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001b5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e5       	ldi	r30, 0x50	; 80
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  9e:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <portB_OutputMode>:
	portC_InputMode(1<<DDC0 | 1<<DDC1);
}

 void portB_Output(uint8_t output)
{
	PORTB = output;
  a6:	94 b1       	in	r25, 0x04	; 4
  a8:	89 2b       	or	r24, r25
  aa:	84 b9       	out	0x04, r24	; 4
  ac:	08 95       	ret

000000ae <portC_InputMode>:
  ae:	97 b1       	in	r25, 0x07	; 7
  b0:	80 95       	com	r24
  b2:	98 23       	and	r25, r24
  b4:	97 b9       	out	0x07, r25	; 7
  b6:	08 95       	ret

000000b8 <setup>:
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	0e 94 53 00 	call	0xa6	; 0xa6 <portB_OutputMode>
  be:	83 e0       	ldi	r24, 0x03	; 3
  c0:	0e 94 57 00 	call	0xae	; 0xae <portC_InputMode>
  c4:	08 95       	ret

000000c6 <displayNumber>:
}

void displayNumber(uint8_t  number[6])
{
	portB_Output(number[i]);
  c6:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
  ca:	82 0f       	add	r24, r18
  cc:	91 1d       	adc	r25, r1
  ce:	fc 01       	movw	r30, r24
  d0:	80 81       	ld	r24, Z
	portC_InputMode(1<<DDC0 | 1<<DDC1);
}

 void portB_Output(uint8_t output)
{
	PORTB = output;
  d2:	85 b9       	out	0x05, r24	; 5
}

void displayNumber(uint8_t  number[6])
{
	portB_Output(number[i]);
	i = (i>=5)? 0 : i+1;
  d4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
  d8:	85 30       	cpi	r24, 0x05	; 5
  da:	10 f4       	brcc	.+4      	; 0xe0 <displayNumber+0x1a>
  dc:	8f 5f       	subi	r24, 0xFF	; 255
  de:	01 c0       	rjmp	.+2      	; 0xe2 <displayNumber+0x1c>
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	83 e2       	ldi	r24, 0x23	; 35
  e8:	94 ef       	ldi	r25, 0xF4	; 244
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <displayNumber+0x24>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <displayNumber+0x2a>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <main>:
	_delay_ms(250);
}

int main(void)
{
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	00 d0       	rcall	.+0      	; 0xfa <main+0x6>
  fa:	00 d0       	rcall	.+0      	; 0xfc <main+0x8>
  fc:	00 d0       	rcall	.+0      	; 0xfe <main+0xa>
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
	uint8_t number[]={ZERO,ONE,TWO,THREE,FOUR,FIVE};
 102:	86 e0       	ldi	r24, 0x06	; 6
 104:	e0 e0       	ldi	r30, 0x00	; 0
 106:	f1 e0       	ldi	r31, 0x01	; 1
 108:	de 01       	movw	r26, r28
 10a:	11 96       	adiw	r26, 0x01	; 1
 10c:	01 90       	ld	r0, Z+
 10e:	0d 92       	st	X+, r0
 110:	8a 95       	dec	r24
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x18>
	
    setup();
 114:	0e 94 5c 00 	call	0xb8	; 0xb8 <setup>

    while (1) 
    {
		
		if (PINC == 65){
			encendido = 1;
 118:	11 e0       	ldi	r17, 0x01	; 1
    setup();

    while (1) 
    {
		
		if (PINC == 65){
 11a:	86 b1       	in	r24, 0x06	; 6
 11c:	81 34       	cpi	r24, 0x41	; 65
 11e:	19 f4       	brne	.+6      	; 0x126 <main+0x32>
			encendido = 1;
 120:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <encendido>
 124:	0c c0       	rjmp	.+24     	; 0x13e <main+0x4a>
		}
		else if(PINC == 66){
 126:	86 b1       	in	r24, 0x06	; 6
 128:	82 34       	cpi	r24, 0x42	; 66
 12a:	29 f4       	brne	.+10     	; 0x136 <main+0x42>
			encendido = 0;
 12c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <encendido>
			i=0;
 130:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
 134:	09 c0       	rjmp	.+18     	; 0x148 <main+0x54>
		}
					
		if (encendido == 1)
 136:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <encendido>
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	29 f4       	brne	.+10     	; 0x148 <main+0x54>
		{
			displayNumber(number);
 13e:	ce 01       	movw	r24, r28
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	0e 94 63 00 	call	0xc6	; 0xc6 <displayNumber>
 146:	e9 cf       	rjmp	.-46     	; 0x11a <main+0x26>
	portC_InputMode(1<<DDC0 | 1<<DDC1);
}

 void portB_Output(uint8_t output)
{
	PORTB = output;
 148:	15 b8       	out	0x05, r1	; 5
 14a:	e7 cf       	rjmp	.-50     	; 0x11a <main+0x26>

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
