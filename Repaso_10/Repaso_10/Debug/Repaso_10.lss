
Repaso_10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000010e  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000871  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000748  00000000  00000000  00000ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ee  00000000  00000000  000011f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000014e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000401  00000000  00000000  0000156c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000154  00000000  00000000  0000196d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001ac1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e0       	ldi	r30, 0x0E	; 14
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  8e:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <portB_OutputMode>:
	portC_InputMode(1<<DDC0 | 1<<DDC1);
}

 void portB_Output(uint8_t output)
{
	PORTB = output;
  96:	94 b1       	in	r25, 0x04	; 4
  98:	89 2b       	or	r24, r25
  9a:	84 b9       	out	0x04, r24	; 4
  9c:	08 95       	ret

0000009e <portC_InputMode>:
  9e:	97 b1       	in	r25, 0x07	; 7
  a0:	80 95       	com	r24
  a2:	98 23       	and	r25, r24
  a4:	97 b9       	out	0x07, r25	; 7
  a6:	08 95       	ret

000000a8 <setup>:
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	0e 94 4b 00 	call	0x96	; 0x96 <portB_OutputMode>
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	0e 94 4f 00 	call	0x9e	; 0x9e <portC_InputMode>
  b4:	08 95       	ret

000000b6 <displayNumber>:
}

void displayNumber(uint8_t  number[6])
{
  b6:	fc 01       	movw	r30, r24
  b8:	9c 01       	movw	r18, r24
  ba:	2a 5f       	subi	r18, 0xFA	; 250
  bc:	3f 4f       	sbci	r19, 0xFF	; 255
	for (int i=0; i<=5;i++)
	{
		portB_Output(number[i]);
  be:	81 91       	ld	r24, Z+
	portC_InputMode(1<<DDC0 | 1<<DDC1);
}

 void portB_Output(uint8_t output)
{
	PORTB = output;
  c0:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	83 e2       	ldi	r24, 0x23	; 35
  c4:	94 ef       	ldi	r25, 0xF4	; 244
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <displayNumber+0x10>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <displayNumber+0x16>
  cc:	00 00       	nop
}

void displayNumber(uint8_t  number[6])
{
	for (int i=0; i<=5;i++)
  ce:	e2 17       	cp	r30, r18
  d0:	f3 07       	cpc	r31, r19
  d2:	a9 f7       	brne	.-22     	; 0xbe <displayNumber+0x8>
	{
		portB_Output(number[i]);
		_delay_ms(250);
	}
}
  d4:	08 95       	ret

000000d6 <main>:

int main(void)
{
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	00 d0       	rcall	.+0      	; 0xdc <main+0x6>
  dc:	00 d0       	rcall	.+0      	; 0xde <main+0x8>
  de:	00 d0       	rcall	.+0      	; 0xe0 <main+0xa>
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
	uint8_t number[]={ZERO,ONE,TWO,THREE,FOUR,FIVE};
  e4:	86 e0       	ldi	r24, 0x06	; 6
  e6:	e0 e0       	ldi	r30, 0x00	; 0
  e8:	f1 e0       	ldi	r31, 0x01	; 1
  ea:	de 01       	movw	r26, r28
  ec:	11 96       	adiw	r26, 0x01	; 1
  ee:	01 90       	ld	r0, Z+
  f0:	0d 92       	st	X+, r0
  f2:	8a 95       	dec	r24
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0x18>
    setup();
  f6:	0e 94 54 00 	call	0xa8	; 0xa8 <setup>
  fa:	04 c0       	rjmp	.+8      	; 0x104 <main+0x2e>

    while (1) 
    {
		while((PINC&(1<<DDC0))==1){
			displayNumber(number);
  fc:	ce 01       	movw	r24, r28
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	0e 94 5b 00 	call	0xb6	; 0xb6 <displayNumber>
	uint8_t number[]={ZERO,ONE,TWO,THREE,FOUR,FIVE};
    setup();

    while (1) 
    {
		while((PINC&(1<<DDC0))==1){
 104:	30 99       	sbic	0x06, 0	; 6
 106:	fa cf       	rjmp	.-12     	; 0xfc <main+0x26>
 108:	fd cf       	rjmp	.-6      	; 0x104 <main+0x2e>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
