
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000122  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000067c  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f8  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e2  00000000  00000000  00000e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001160  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000349  00000000  00000000  00001184  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000014cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define DIGIT_0			0x01
#define DIGIT_1			0x02

int main(void)
{
    DDR_SPI |= 1<<MOSI | 1<<SCK |1<<SS;
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8c 62       	ori	r24, 0x2C	; 44
  84:	84 b9       	out	0x04, r24	; 4
	SPCR |= 1<<SPE | 1<<MSTR;// Habilitar SPI | Confugurarlo como Maestro
  86:	8c b5       	in	r24, 0x2c	; 44
  88:	80 65       	ori	r24, 0x50	; 80
  8a:	8c bd       	out	0x2c, r24	; 44
	//SPSR |= 1<<SPI2X;//Preescaler 2
	
	/************************************************************************/
	/* Configuracion MAX7219                                                */
	/************************************************************************/
	PORTB &= ~(1<<SS);
  8c:	2a 98       	cbi	0x05, 2	; 5
	SPDR = SHUTDOWN;
  8e:	8c e0       	ldi	r24, 0x0C	; 12
  90:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
  92:	0d b4       	in	r0, 0x2d	; 45
  94:	07 fe       	sbrs	r0, 7
  96:	fd cf       	rjmp	.-6      	; 0x92 <main+0x12>
	SPDR = 0x01;
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
  9c:	0d b4       	in	r0, 0x2d	; 45
  9e:	07 fe       	sbrs	r0, 7
  a0:	fd cf       	rjmp	.-6      	; 0x9c <main+0x1c>
	PORTB |= 1<<SS;
  a2:	2a 9a       	sbi	0x05, 2	; 5
	PORTB &= ~(1<<SS);
  a4:	2a 98       	cbi	0x05, 2	; 5
	SPDR = DECODE_MODE;
  a6:	89 e0       	ldi	r24, 0x09	; 9
  a8:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
  aa:	0d b4       	in	r0, 0x2d	; 45
  ac:	07 fe       	sbrs	r0, 7
  ae:	fd cf       	rjmp	.-6      	; 0xaa <main+0x2a>
	SPDR = 0x0F;
  b0:	8f e0       	ldi	r24, 0x0F	; 15
  b2:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
  b4:	0d b4       	in	r0, 0x2d	; 45
  b6:	07 fe       	sbrs	r0, 7
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <main+0x34>
	PORTB |= 1<<SS;
  ba:	2a 9a       	sbi	0x05, 2	; 5
	PORTB &= ~(1<<SS);
  bc:	2a 98       	cbi	0x05, 2	; 5
	SPDR = INTENSITY;
  be:	8a e0       	ldi	r24, 0x0A	; 10
  c0:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
  c2:	0d b4       	in	r0, 0x2d	; 45
  c4:	07 fe       	sbrs	r0, 7
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <main+0x42>
	SPDR = 0x0F;
  c8:	8f e0       	ldi	r24, 0x0F	; 15
  ca:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
  cc:	0d b4       	in	r0, 0x2d	; 45
  ce:	07 fe       	sbrs	r0, 7
  d0:	fd cf       	rjmp	.-6      	; 0xcc <main+0x4c>
	PORTB |= 1<<SS;
  d2:	2a 9a       	sbi	0x05, 2	; 5
	PORTB &= ~(1<<SS);
  d4:	2a 98       	cbi	0x05, 2	; 5
	SPDR = SCAN_LIMIT;
  d6:	8b e0       	ldi	r24, 0x0B	; 11
  d8:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
  da:	0d b4       	in	r0, 0x2d	; 45
  dc:	07 fe       	sbrs	r0, 7
  de:	fd cf       	rjmp	.-6      	; 0xda <main+0x5a>
	SPDR = 0x01;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
  e4:	0d b4       	in	r0, 0x2d	; 45
  e6:	07 fe       	sbrs	r0, 7
  e8:	fd cf       	rjmp	.-6      	; 0xe4 <main+0x64>
	PORTB |= 1<<SS;
  ea:	2a 9a       	sbi	0x05, 2	; 5
	PORTB &= ~(1<<SS);
  ec:	2a 98       	cbi	0x05, 2	; 5
	SPDR = DIGIT_0;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
  f2:	0d b4       	in	r0, 0x2d	; 45
  f4:	07 fe       	sbrs	r0, 7
  f6:	fd cf       	rjmp	.-6      	; 0xf2 <main+0x72>
	SPDR = 0x05;
  f8:	85 e0       	ldi	r24, 0x05	; 5
  fa:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
  fc:	0d b4       	in	r0, 0x2d	; 45
  fe:	07 fe       	sbrs	r0, 7
 100:	fd cf       	rjmp	.-6      	; 0xfc <main+0x7c>
	PORTB |= 1<<SS;
 102:	2a 9a       	sbi	0x05, 2	; 5
	PORTB &= ~(1<<SS);
 104:	2a 98       	cbi	0x05, 2	; 5
	SPDR = DIGIT_1	;
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 10a:	0d b4       	in	r0, 0x2d	; 45
 10c:	07 fe       	sbrs	r0, 7
 10e:	fd cf       	rjmp	.-6      	; 0x10a <main+0x8a>
	SPDR = 0x07;
 110:	87 e0       	ldi	r24, 0x07	; 7
 112:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 114:	0d b4       	in	r0, 0x2d	; 45
 116:	07 fe       	sbrs	r0, 7
 118:	fd cf       	rjmp	.-6      	; 0x114 <main+0x94>
	PORTB |= 1<<SS;
 11a:	2a 9a       	sbi	0x05, 2	; 5
 11c:	ff cf       	rjmp	.-2      	; 0x11c <main+0x9c>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
