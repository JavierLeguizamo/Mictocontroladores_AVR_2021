
Ejemplo1_2021.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007aa  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c4  00000000  00000000  0000098e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d0  00000000  00000000  00001052  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001324  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a0  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  00001708  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000017bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  78:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup>:
		secuencia();	
    }
}

void setup(){ 
	DIRECCION_PB(TODOS_BITS_SALIDA);//<-DDRB|=255
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	84 b9       	out	0x04, r24	; 4
	DIRECCION_PD(TODOS_BITS_SALIDA);//<-DDRD|=255
  86:	9a b1       	in	r25, 0x0a	; 10
  88:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~(33);
  8a:	84 b1       	in	r24, 0x04	; 4
  8c:	8e 7d       	andi	r24, 0xDE	; 222
  8e:	84 b9       	out	0x04, r24	; 4
  90:	08 95       	ret

00000092 <secuencia>:
}
void secuencia(){
  92:	29 e0       	ldi	r18, 0x09	; 9
  94:	30 e0       	ldi	r19, 0x00	; 0
	for (int i=1; i<=256;i=i<<1) 
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
	{
		ESCRIBIR_PB(i);
  9a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	4f e7       	ldi	r20, 0x7F	; 127
  9e:	5a e1       	ldi	r21, 0x1A	; 26
  a0:	66 e0       	ldi	r22, 0x06	; 6
  a2:	41 50       	subi	r20, 0x01	; 1
  a4:	50 40       	sbci	r21, 0x00	; 0
  a6:	60 40       	sbci	r22, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <secuencia+0x10>
  aa:	00 c0       	rjmp	.+0      	; 0xac <secuencia+0x1a>
  ac:	00 00       	nop
	DIRECCION_PB(TODOS_BITS_SALIDA);//<-DDRB|=255
	DIRECCION_PD(TODOS_BITS_SALIDA);//<-DDRD|=255
	DDRB &= ~(33);
}
void secuencia(){
	for (int i=1; i<=256;i=i<<1) 
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	31 09       	sbc	r19, r1
  b6:	89 f7       	brne	.-30     	; 0x9a <secuencia+0x8>
  b8:	29 e0       	ldi	r18, 0x09	; 9
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
		ESCRIBIR_PB(i);
		_delay_ms(250);
	}
	for (int i=1; i<=256;i=i<<1)
	{
		ESCRIBIR_PD(i);
  c0:	8b b9       	out	0x0b, r24	; 11
  c2:	4f e7       	ldi	r20, 0x7F	; 127
  c4:	5a e1       	ldi	r21, 0x1A	; 26
  c6:	66 e0       	ldi	r22, 0x06	; 6
  c8:	41 50       	subi	r20, 0x01	; 1
  ca:	50 40       	sbci	r21, 0x00	; 0
  cc:	60 40       	sbci	r22, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <secuencia+0x36>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <secuencia+0x40>
  d2:	00 00       	nop
	for (int i=1; i<=256;i=i<<1) 
	{
		ESCRIBIR_PB(i);
		_delay_ms(250);
	}
	for (int i=1; i<=256;i=i<<1)
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	31 09       	sbc	r19, r1
  dc:	89 f7       	brne	.-30     	; 0xc0 <secuencia+0x2e>
	{
		ESCRIBIR_PD(i);
		_delay_ms(250);
	}
}
  de:	08 95       	ret

000000e0 <main>:
void setup(void);
void secuencia(void);

int main(void)
{
    setup();
  e0:	0e 94 40 00 	call	0x80	; 0x80 <setup>
    while (1) //loop()
    {
		secuencia();	
  e4:	0e 94 49 00 	call	0x92	; 0x92 <secuencia>
  e8:	fd cf       	rjmp	.-6      	; 0xe4 <main+0x4>

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
