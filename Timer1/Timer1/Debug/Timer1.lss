
Timer1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000130  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b5  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068a  00000000  00000000  000009c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029b  00000000  00000000  00001053  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a3  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d4  00000000  00000000  000016b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000178b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>

int main(void)
{
    /* Replace with your application code */
    DDRB |= _BV(DDB1);
  80:	21 9a       	sbi	0x04, 1	; 4
    TCCR1A |= _BV(WGM10) | _BV(WGM11) | _BV(COM1A1);
  82:	e0 e8       	ldi	r30, 0x80	; 128
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	80 81       	ld	r24, Z
  88:	83 68       	ori	r24, 0x83	; 131
  8a:	80 83       	st	Z, r24
	TCCR1B |= _BV(WGM12) | _BV(CS11) ;
  8c:	e1 e8       	ldi	r30, 0x81	; 129
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	8a 60       	ori	r24, 0x0A	; 10
  94:	80 83       	st	Z, r24
	OCR1A = 1;
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  9e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	while (1) 
    {
		for (OCR1A=1; OCR1A<=1000;OCR1A +=10)
  a2:	e8 e8       	ldi	r30, 0x88	; 136
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	41 e0       	ldi	r20, 0x01	; 1
  a8:	50 e0       	ldi	r21, 0x00	; 0
		{
			_delay_ms(25);
		}
		_delay_ms(1000);
		for (OCR1A = 1000; OCR1A>0;OCR1A -=10)
  aa:	28 ee       	ldi	r18, 0xE8	; 232
  ac:	33 e0       	ldi	r19, 0x03	; 3
    TCCR1A |= _BV(WGM10) | _BV(WGM11) | _BV(COM1A1);
	TCCR1B |= _BV(WGM12) | _BV(CS11) ;
	OCR1A = 1;
	while (1) 
    {
		for (OCR1A=1; OCR1A<=1000;OCR1A +=10)
  ae:	51 83       	std	Z+1, r21	; 0x01
  b0:	40 83       	st	Z, r20
  b2:	80 81       	ld	r24, Z
  b4:	91 81       	ldd	r25, Z+1	; 0x01
  b6:	89 3e       	cpi	r24, 0xE9	; 233
  b8:	93 40       	sbci	r25, 0x03	; 3
  ba:	80 f4       	brcc	.+32     	; 0xdc <main+0x5c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	89 e6       	ldi	r24, 0x69	; 105
  be:	98 e1       	ldi	r25, 0x18	; 24
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x40>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x46>
  c6:	00 00       	nop
  c8:	80 81       	ld	r24, Z
  ca:	91 81       	ldd	r25, Z+1	; 0x01
  cc:	0a 96       	adiw	r24, 0x0a	; 10
  ce:	91 83       	std	Z+1, r25	; 0x01
  d0:	80 83       	st	Z, r24
  d2:	80 81       	ld	r24, Z
  d4:	91 81       	ldd	r25, Z+1	; 0x01
  d6:	89 3e       	cpi	r24, 0xE9	; 233
  d8:	93 40       	sbci	r25, 0x03	; 3
  da:	80 f3       	brcs	.-32     	; 0xbc <main+0x3c>
  dc:	8f e3       	ldi	r24, 0x3F	; 63
  de:	9d e0       	ldi	r25, 0x0D	; 13
  e0:	63 e0       	ldi	r22, 0x03	; 3
  e2:	81 50       	subi	r24, 0x01	; 1
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	60 40       	sbci	r22, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x62>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x6c>
  ec:	00 00       	nop
		{
			_delay_ms(25);
		}
		_delay_ms(1000);
		for (OCR1A = 1000; OCR1A>0;OCR1A -=10)
  ee:	31 83       	std	Z+1, r19	; 0x01
  f0:	20 83       	st	Z, r18
  f2:	80 81       	ld	r24, Z
  f4:	91 81       	ldd	r25, Z+1	; 0x01
  f6:	89 2b       	or	r24, r25
  f8:	79 f0       	breq	.+30     	; 0x118 <main+0x98>
  fa:	89 e6       	ldi	r24, 0x69	; 105
  fc:	98 e1       	ldi	r25, 0x18	; 24
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x7e>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x84>
 104:	00 00       	nop
 106:	80 81       	ld	r24, Z
 108:	91 81       	ldd	r25, Z+1	; 0x01
 10a:	0a 97       	sbiw	r24, 0x0a	; 10
 10c:	91 83       	std	Z+1, r25	; 0x01
 10e:	80 83       	st	Z, r24
 110:	80 81       	ld	r24, Z
 112:	91 81       	ldd	r25, Z+1	; 0x01
 114:	89 2b       	or	r24, r25
 116:	89 f7       	brne	.-30     	; 0xfa <main+0x7a>
 118:	9f e3       	ldi	r25, 0x3F	; 63
 11a:	6d e0       	ldi	r22, 0x0D	; 13
 11c:	83 e0       	ldi	r24, 0x03	; 3
 11e:	91 50       	subi	r25, 0x01	; 1
 120:	60 40       	sbci	r22, 0x00	; 0
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x9e>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0xa8>
 128:	00 00       	nop
 12a:	c1 cf       	rjmp	.-126    	; 0xae <main+0x2e>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
