
ADC_Precencial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d8  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000647  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022c  00000000  00000000  00000edf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000110c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000371  00000000  00000000  00001140  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000021  00000000  00000000  000014b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000014d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <read_ADC>:
		PORTD = read_ADC(1);
    }
}

uint16_t read_ADC(uint8_t adc){
	ADMUX = _BV(REFS0) | adc;
  80:	80 64       	ori	r24, 0x40	; 64
  82:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA |=  _BV(ADSC);
  86:	ea e7       	ldi	r30, 0x7A	; 122
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	80 83       	st	Z, r24
	while(!( ADCSRA & 1<<ADIF));
  90:	80 81       	ld	r24, Z
  92:	84 ff       	sbrs	r24, 4
  94:	fd cf       	rjmp	.-6      	; 0x90 <read_ADC+0x10>
	return ADC;
  96:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  9a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  9e:	08 95       	ret

000000a0 <main>:
uint16_t read_ADC(uint8_t adc);

int main(void)
{
    /* Replace with your application code */
	DDRB |= 0xFF;
  a0:	84 b1       	in	r24, 0x04	; 4
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	84 b9       	out	0x04, r24	; 4
	DDRD |=0xFF;
  a6:	9a b1       	in	r25, 0x0a	; 10
  a8:	8a b9       	out	0x0a, r24	; 10
    ADMUX |= _BV(REFS0);
  aa:	ec e7       	ldi	r30, 0x7C	; 124
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADEN) | _BV(ADSC) | 3<<ADPS0;
  b4:	ea e7       	ldi	r30, 0x7A	; 122
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	83 6c       	ori	r24, 0xC3	; 195
  bc:	80 83       	st	Z, r24
    while (1) 
    {
		PORTB = read_ADC(0);
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0e 94 40 00 	call	0x80	; 0x80 <read_ADC>
  c4:	85 b9       	out	0x05, r24	; 5
		PORTD = read_ADC(1);
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	0e 94 40 00 	call	0x80	; 0x80 <read_ADC>
  cc:	8b b9       	out	0x0b, r24	; 11
  ce:	f7 cf       	rjmp	.-18     	; 0xbe <main+0x1e>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
