
LCD_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ac  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000696  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000306  00000000  00000000  00001022  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001328  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a7  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b9  00000000  00000000  000016f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define DATA_PORT PORTB
#define CONTROL_PORT PORTC

int main(void)
{
    DDRB |= 0xFF;
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	84 b9       	out	0x04, r24	; 4
	DDRC |= RS | RW | E; 
  86:	87 b1       	in	r24, 0x07	; 7
  88:	87 60       	ori	r24, 0x07	; 7
  8a:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	85 ea       	ldi	r24, 0xA5	; 165
  8e:	9e e0       	ldi	r25, 0x0E	; 14
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <main+0x10>
  94:	00 c0       	rjmp	.+0      	; 0x96 <main+0x16>
  96:	00 00       	nop
	
	_delay_ms(15);
	CONTROL_PORT &= ~(RS|RW|E); 
  98:	88 b1       	in	r24, 0x08	; 8
  9a:	88 7f       	andi	r24, 0xF8	; 248
  9c:	88 b9       	out	0x08, r24	; 8
	DATA_PORT = 0x30;
  9e:	80 e3       	ldi	r24, 0x30	; 48
  a0:	85 b9       	out	0x05, r24	; 5
	CONTROL_PORT |= E;
  a2:	42 9a       	sbi	0x08, 2	; 8
	CONTROL_PORT &= ~(E);
  a4:	42 98       	cbi	0x08, 2	; 8
  a6:	e1 ee       	ldi	r30, 0xE1	; 225
  a8:	f4 e0       	ldi	r31, 0x04	; 4
  aa:	31 97       	sbiw	r30, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <main+0x2a>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x30>
  b0:	00 00       	nop
	
	_delay_ms(5);
	
	DATA_PORT = 0x30;
  b2:	85 b9       	out	0x05, r24	; 5
	CONTROL_PORT |= E;
  b4:	42 9a       	sbi	0x08, 2	; 8
	CONTROL_PORT &= ~(E);
  b6:	42 98       	cbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	f1 e2       	ldi	r31, 0x21	; 33
  ba:	fa 95       	dec	r31
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x3a>
  be:	00 00       	nop
	
	_delay_us(100);
	
	DATA_PORT = 0x30;
  c0:	85 b9       	out	0x05, r24	; 5
	CONTROL_PORT |= E;
  c2:	42 9a       	sbi	0x08, 2	; 8
	CONTROL_PORT &= ~(E);
  c4:	42 98       	cbi	0x08, 2	; 8
	DATA_PORT = 0x38;
  c6:	88 e3       	ldi	r24, 0x38	; 56
  c8:	85 b9       	out	0x05, r24	; 5
	CONTROL_PORT &= ~(E);
  ca:	42 98       	cbi	0x08, 2	; 8
	
	DATA_PORT = 0x08;
  cc:	88 e0       	ldi	r24, 0x08	; 8
  ce:	85 b9       	out	0x05, r24	; 5
	CONTROL_PORT |= E;
  d0:	42 9a       	sbi	0x08, 2	; 8
	CONTROL_PORT &= ~(E);
  d2:	42 98       	cbi	0x08, 2	; 8

	DATA_PORT = 0x01;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	85 b9       	out	0x05, r24	; 5
	CONTROL_PORT |= E;
  d8:	42 9a       	sbi	0x08, 2	; 8
	CONTROL_PORT &= ~(E);
  da:	42 98       	cbi	0x08, 2	; 8

	DATA_PORT = 0x06;
  dc:	86 e0       	ldi	r24, 0x06	; 6
  de:	85 b9       	out	0x05, r24	; 5
	CONTROL_PORT |= E;
  e0:	42 9a       	sbi	0x08, 2	; 8
	CONTROL_PORT &= ~(E);
  e2:	42 98       	cbi	0x08, 2	; 8
	
	
	DATA_PORT = 0x0e;
  e4:	8e e0       	ldi	r24, 0x0E	; 14
  e6:	85 b9       	out	0x05, r24	; 5
	//DATA_PORT = 0x0f;
	CONTROL_PORT |= E;
  e8:	42 9a       	sbi	0x08, 2	; 8
	CONTROL_PORT &= ~(E);
  ea:	42 98       	cbi	0x08, 2	; 8
	DATA_PORT = 0x0f;
  ec:	8f e0       	ldi	r24, 0x0F	; 15
  ee:	85 b9       	out	0x05, r24	; 5
	CONTROL_PORT |= E;
  f0:	42 9a       	sbi	0x08, 2	; 8
	CONTROL_PORT &= ~(E);
  f2:	42 98       	cbi	0x08, 2	; 8
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <main+0x74>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
