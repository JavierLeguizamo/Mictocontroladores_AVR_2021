
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000172  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008e2  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000737  00000000  00000000  00000b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b4  00000000  00000000  000012a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00001660  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000420  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001fd  00000000  00000000  00001b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001d2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 98 00 	call	0x130	; 0x130 <main>
  78:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup>:
	}
	return 0;
}

void setup(){
	PORT_OUTPUT_MODE(PORT_D_MODE,ALL_BITS_OUTPUTS);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	8a b9       	out	0x0a, r24	; 10
	PORT_INPUT_MODE(PORT_C_MODE,INPUT_BITS);
  86:	87 b1       	in	r24, 0x07	; 7
  88:	8c 7f       	andi	r24, 0xFC	; 252
  8a:	87 b9       	out	0x07, r24	; 7
  8c:	08 95       	ret

0000008e <waitStartButton>:
}
void waitStartButton(){
	while(!(READ_BIT_IS_TRUE(START_BUTTON)));
  8e:	30 9b       	sbis	0x06, 0	; 6
  90:	fe cf       	rjmp	.-4      	; 0x8e <waitStartButton>
}
  92:	08 95       	ret

00000094 <waitReleaseButton>:
void waitReleaseButton(){
	while(READ_BIT_IS_TRUE(POLARITY_BUTTON));
  94:	31 99       	sbic	0x06, 1	; 6
  96:	fe cf       	rjmp	.-4      	; 0x94 <waitReleaseButton>
}
  98:	08 95       	ret

0000009a <readPolarityButton>:
void readPolarityButton(unsigned char *polarity){
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
	if(READ_BIT_IS_TRUE(POLARITY_BUTTON)){
  9e:	31 9b       	sbis	0x06, 1	; 6
  a0:	10 c0       	rjmp	.+32     	; 0xc2 <readPolarityButton+0x28>
  a2:	ec 01       	movw	r28, r24
		waitReleaseButton();
  a4:	0e 94 4a 00 	call	0x94	; 0x94 <waitReleaseButton>
		PORT_OUT = ~PORT_OUT;
  a8:	8b b1       	in	r24, 0x0b	; 11
  aa:	80 95       	com	r24
  ac:	8b b9       	out	0x0b, r24	; 11
		*polarity ^= _BV(0);
  ae:	98 81       	ld	r25, Y
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	89 27       	eor	r24, r25
  b4:	88 83       	st	Y, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	83 e2       	ldi	r24, 0x23	; 35
  b8:	94 ef       	ldi	r25, 0xF4	; 244
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <readPolarityButton+0x20>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <readPolarityButton+0x26>
  c0:	00 00       	nop
		_delay_ms(TIME);
	}
}
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <portShiftLeft>:
unsigned char portShiftLeft(unsigned char *polarity){
  c8:	fc 01       	movw	r30, r24
	return PORT_OUT<<1 | ((*polarity==OFF)?0:(_BV(0)));
  ca:	9b b1       	in	r25, 0x0b	; 11
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	80 81       	ld	r24, Z
  d0:	81 11       	cpse	r24, r1
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <portShiftLeft+0xe>
  d4:	20 e0       	ldi	r18, 0x00	; 0
  d6:	89 2f       	mov	r24, r25
  d8:	88 0f       	add	r24, r24
}
  da:	82 2b       	or	r24, r18
  dc:	08 95       	ret

000000de <portShiftRight>:
unsigned char portShiftRight(unsigned char *polarity){
  de:	fc 01       	movw	r30, r24
	return PORT_OUT>>1 | ((*polarity==OFF)?0:(_BV(7)));
  e0:	9b b1       	in	r25, 0x0b	; 11
  e2:	96 95       	lsr	r25
  e4:	80 81       	ld	r24, Z
  e6:	88 23       	and	r24, r24
  e8:	11 f0       	breq	.+4      	; 0xee <portShiftRight+0x10>
  ea:	80 e8       	ldi	r24, 0x80	; 128
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <portShiftRight+0x12>
  ee:	80 e0       	ldi	r24, 0x00	; 0
}
  f0:	89 2b       	or	r24, r25
  f2:	08 95       	ret

000000f4 <rotation>:
void rotation(unsigned char *direction, unsigned char *polarity){
  f4:	fc 01       	movw	r30, r24
	*direction = (END_FORWARD_TRUE)?
  f6:	9b b1       	in	r25, 0x0b	; 11
  f8:	90 38       	cpi	r25, 0x80	; 128
  fa:	b9 f0       	breq	.+46     	; 0x12a <rotation+0x36>
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	8f 37       	cpi	r24, 0x7F	; 127
 100:	a1 f0       	breq	.+40     	; 0x12a <rotation+0x36>
	BACKWARD:
	(END_BACKWARD_TRUE)?
 102:	8b b1       	in	r24, 0x0b	; 11
}
unsigned char portShiftRight(unsigned char *polarity){
	return PORT_OUT>>1 | ((*polarity==OFF)?0:(_BV(7)));
}
void rotation(unsigned char *direction, unsigned char *polarity){
	*direction = (END_FORWARD_TRUE)?
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	79 f0       	breq	.+30     	; 0x126 <rotation+0x32>
	BACKWARD:
	(END_BACKWARD_TRUE)?
 108:	8b b1       	in	r24, 0x0b	; 11
 10a:	8e 3f       	cpi	r24, 0xFE	; 254
 10c:	61 f0       	breq	.+24     	; 0x126 <rotation+0x32>
	FORWARD:
	*direction;
	PORT_OUT = (*direction == FORWARD)?
 10e:	80 81       	ld	r24, Z
 110:	81 11       	cpse	r24, r1
 112:	04 c0       	rjmp	.+8      	; 0x11c <rotation+0x28>
 114:	cb 01       	movw	r24, r22
 116:	0e 94 64 00 	call	0xc8	; 0xc8 <portShiftLeft>
 11a:	03 c0       	rjmp	.+6      	; 0x122 <rotation+0x2e>
 11c:	cb 01       	movw	r24, r22
 11e:	0e 94 6f 00 	call	0xde	; 0xde <portShiftRight>
 122:	8b b9       	out	0x0b, r24	; 11
	portShiftLeft(polarity):
	portShiftRight(polarity);
}
 124:	08 95       	ret
}
unsigned char portShiftRight(unsigned char *polarity){
	return PORT_OUT>>1 | ((*polarity==OFF)?0:(_BV(7)));
}
void rotation(unsigned char *direction, unsigned char *polarity){
	*direction = (END_FORWARD_TRUE)?
 126:	10 82       	st	Z, r1
 128:	f5 cf       	rjmp	.-22     	; 0x114 <rotation+0x20>
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 83       	st	Z, r24
 12e:	f6 cf       	rjmp	.-20     	; 0x11c <rotation+0x28>

00000130 <main>:
void readPolarityButton(unsigned char *);
unsigned char portShiftLeft(unsigned char *);
unsigned char portShiftRight(unsigned char *);
void rotation(unsigned char *, unsigned char *);

int main() {
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	00 d0       	rcall	.+0      	; 0x136 <main+0x6>
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
	unsigned char direction = FORWARD, polarity = OFF;
 13a:	19 82       	std	Y+1, r1	; 0x01
 13c:	1a 82       	std	Y+2, r1	; 0x02
	setup();
 13e:	0e 94 40 00 	call	0x80	; 0x80 <setup>
	waitStartButton();
 142:	0e 94 47 00 	call	0x8e	; 0x8e <waitStartButton>
	PORT_OUT = START_FORWARD;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	8b b9       	out	0x0b, r24	; 11
	while(1){
		readPolarityButton(&polarity);
 14a:	ce 01       	movw	r24, r28
 14c:	02 96       	adiw	r24, 0x02	; 2
 14e:	0e 94 4d 00 	call	0x9a	; 0x9a <readPolarityButton>
		rotation(&direction,&polarity);
 152:	be 01       	movw	r22, r28
 154:	6e 5f       	subi	r22, 0xFE	; 254
 156:	7f 4f       	sbci	r23, 0xFF	; 255
 158:	ce 01       	movw	r24, r28
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	0e 94 7a 00 	call	0xf4	; 0xf4 <rotation>
 160:	83 e2       	ldi	r24, 0x23	; 35
 162:	94 ef       	ldi	r25, 0xF4	; 244
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <main+0x34>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x3a>
 16a:	00 00       	nop
 16c:	ee cf       	rjmp	.-36     	; 0x14a <main+0x1a>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
